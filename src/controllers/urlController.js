const urlModel = require("../models/urlModel.js");
const validator = require("../validators/validator.js");
const shortid = require("shortid");
const baseUrl = "http://localhost:3000/";
const redis = require("redis");
const { promisify } = require("util");

//Connect to redis
const redisClient = redis.createClient(
    14040,
    "redis-14040.c264.ap-south-1-1.ec2.cloud.redislabs.com", { no_ready_check: true }
);
redisClient.auth("2tmMudjaWwiAvxVW9pXj2Xq0U20LTPRx", function(err) {
    if (err) throw err;
});

redisClient.on("connect", async function() {
    console.log("Connected to Redis..");
});

//Connection setup for redis
const SET_ASYNC = promisify(redisClient.SET).bind(redisClient);
const GET_ASYNC = promisify(redisClient.GET).bind(redisClient);

// Converting long URL to short. --> 1st API
const urlShort = async function(req, res) {
    try {
        let longUrl = req.body.longUrl;
        const trimLongUrl = longUrl.split("").map((a) => a.trim()).join(""); //removing extra spcaes from the URL
        const requestBody = req.body;

        if (!validator.isValid(trimLongUrl)) {
            return res
                .status(400)
                .send({ status: false, message: "Please provide Long URL." });
        }

        if (!validator.isValidRequestBody(requestBody)) {
            return res.status(400).send({
                status: false,
                message: "Invalid request parameters. Please provide URL details",
            });
        }

        //URl validation
        if (!/(ftp|http|https|HTTPS|HTTP):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-/]))?/.test(trimLongUrl)) { //validating protocol and the domain name
            return res.status(400).send({
                status: false,
                message: "Invalid URL. Please provide correct URL",
            });
        }

        // if (!(/(.com|.org|.co.in|.in|.co|.us)/.test(trimLongUrl))) { //Validating top level domain
        //     return res.send("Url is not valid")
        // }

        const findInCache = await GET_ASYNC(trimLongUrl)
        if (findInCache) {
            let data = JSON.parse(findInCache)
            return res.status(200).send({ status: true, message: "Entry already stored in cache", data: data })
        }

        //Checking whether the urlcode is already generated by the same longUrl or not.
        const alreadyCodeGeneratedByLongUrl = await urlModel.findOne({ longUrl: trimLongUrl }).select({ createdAt: 0, updatedAt: 0, __v: 0 });

        if (alreadyCodeGeneratedByLongUrl) { //if yes then sending the data of that urlCode in reponse along with a message.
            await SET_ASYNC(`${trimLongUrl}`, JSON.stringify(alreadyCodeGeneratedByLongUrl))
            return res.status(200).send({
                status: true,
                message: `URL code & Short URL already been generated for the above provided long URL`,
                data: (alreadyCodeGeneratedByLongUrl)
            })

        } else {
            const urlCode = shortid.generate(); //Generating unique random code for each & every entry
            const lowerUrlCode = urlCode.toLowerCase();
            const shortUrl = baseUrl + lowerUrlCode; //concatenating base URL & URL code

            const data = {};
            data["longUrl"] = trimLongUrl;
            data["shortUrl"] = shortUrl;
            data["urlCode"] = lowerUrlCode;
            const saveInDb = await urlModel.create(data);

            const response = await urlModel.findOne({ urlCode }).select({
                _id: 0,
                updatedAt: 0,
                createdAt: 0,
                __v: 0
            })

            const responseForCache = await urlModel.findOne({ urlCode })
            await SET_ASYNC(`${req.body.longUrl}`, JSON.stringify(response))
            await SET_ASYNC(`${urlCode}`, JSON.stringify(responseForCache))

            return res.status(201).send({
                status: true,
                message: `Successfully Shorten the URL`,
                data: response
            });
        }
    } catch (err) {
        console.log(err.message);
        return res.status(500).send({
            status: false,
            message: "Something went wrong",
            Error: err.message,
        });
    }
};

// Fetching data of URL code and redirecting to its long URL. --> 2nd API
const redirectUrl = async function(req, res) {
    try {
        const paramsUrlCode = req.params.urlCode; //accessing urlCode from params
        //console.log(paramsUrlCode)

        let cachedProfileData = await GET_ASYNC(`${paramsUrlCode}`)
            // console.log(cachedProfileData)

        let cachedProfileData1 = JSON.parse(cachedProfileData)
        console.log(cachedProfileData1) //null

        if (cachedProfileData) {
            let cachedProfileData1 = JSON.parse(cachedProfileData)
            return res.redirect(307, cachedProfileData1.longUrl)
        } else {
            let url = await urlModel.findOne({ urlCode: paramsUrlCode });
            // res.send({ data: url });
            if (!url) {
                return res.status(404).send({ status: false, message: "Url Not Found by the provided short URL." })
            } else {
                await SET_ASYNC(`${paramsUrlCode}`, JSON.stringify(url)) //redis take argument as string
                return res.redirect(307, url.longUrl)
            }
        }
    } catch (error) {
        return res.status(500).send({
            status: false,
            message: "Something went wrong",
            Error: error.message
        })
    }
}

module.exports.urlShort = urlShort;
module.exports.redirectUrl = redirectUrl;
